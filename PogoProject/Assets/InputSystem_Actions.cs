//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Dpad Move"",
            ""id"": ""71e2248e-5cde-4b9d-a200-ef6a48148873"",
            ""actions"": [
                {
                    ""name"": ""DpadUp"",
                    ""type"": ""Button"",
                    ""id"": ""643bd8b9-5cef-4a29-819c-d6b78df374a1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DpadDown"",
                    ""type"": ""Button"",
                    ""id"": ""ec89571c-bf30-4c68-85ff-d21394374ab6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DpadRight"",
                    ""type"": ""Button"",
                    ""id"": ""d3bc39a3-d49d-40db-b808-0b66183c6e29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DpadLeft"",
                    ""type"": ""Button"",
                    ""id"": ""031b1a61-0f73-4d3a-83df-3a299bf2ff22"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ec9d0c3e-94b1-4565-a554-d3b92ca46dad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e5d20878-814b-4ec5-8bfc-f11cbaad8565"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb02d22c-c879-4852-8c04-3f2e7699bf2b"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DpadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""339574f4-83ba-422e-86ee-8c63950ab5c8"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DpadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ea13ff3-e962-4462-9914-c344783337f8"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DpadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e4ccf2a-25d0-41c2-b4b2-5b9db9975c92"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DpadLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7a4a40f-e4b9-4d9b-8e73-4874d650ea43"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eecc1f7a-4e66-4001-805e-a16b55258fbd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Dpad Move
        m_DpadMove = asset.FindActionMap("Dpad Move", throwIfNotFound: true);
        m_DpadMove_DpadUp = m_DpadMove.FindAction("DpadUp", throwIfNotFound: true);
        m_DpadMove_DpadDown = m_DpadMove.FindAction("DpadDown", throwIfNotFound: true);
        m_DpadMove_DpadRight = m_DpadMove.FindAction("DpadRight", throwIfNotFound: true);
        m_DpadMove_DpadLeft = m_DpadMove.FindAction("DpadLeft", throwIfNotFound: true);
        m_DpadMove_Dash = m_DpadMove.FindAction("Dash", throwIfNotFound: true);
        m_DpadMove_Move = m_DpadMove.FindAction("Move", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_DpadMove.enabled, "This will cause a leak and performance issues, InputSystem_Actions.DpadMove.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dpad Move
    private readonly InputActionMap m_DpadMove;
    private List<IDpadMoveActions> m_DpadMoveActionsCallbackInterfaces = new List<IDpadMoveActions>();
    private readonly InputAction m_DpadMove_DpadUp;
    private readonly InputAction m_DpadMove_DpadDown;
    private readonly InputAction m_DpadMove_DpadRight;
    private readonly InputAction m_DpadMove_DpadLeft;
    private readonly InputAction m_DpadMove_Dash;
    private readonly InputAction m_DpadMove_Move;
    public struct DpadMoveActions
    {
        private @InputSystem_Actions m_Wrapper;
        public DpadMoveActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DpadUp => m_Wrapper.m_DpadMove_DpadUp;
        public InputAction @DpadDown => m_Wrapper.m_DpadMove_DpadDown;
        public InputAction @DpadRight => m_Wrapper.m_DpadMove_DpadRight;
        public InputAction @DpadLeft => m_Wrapper.m_DpadMove_DpadLeft;
        public InputAction @Dash => m_Wrapper.m_DpadMove_Dash;
        public InputAction @Move => m_Wrapper.m_DpadMove_Move;
        public InputActionMap Get() { return m_Wrapper.m_DpadMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DpadMoveActions set) { return set.Get(); }
        public void AddCallbacks(IDpadMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_DpadMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DpadMoveActionsCallbackInterfaces.Add(instance);
            @DpadUp.started += instance.OnDpadUp;
            @DpadUp.performed += instance.OnDpadUp;
            @DpadUp.canceled += instance.OnDpadUp;
            @DpadDown.started += instance.OnDpadDown;
            @DpadDown.performed += instance.OnDpadDown;
            @DpadDown.canceled += instance.OnDpadDown;
            @DpadRight.started += instance.OnDpadRight;
            @DpadRight.performed += instance.OnDpadRight;
            @DpadRight.canceled += instance.OnDpadRight;
            @DpadLeft.started += instance.OnDpadLeft;
            @DpadLeft.performed += instance.OnDpadLeft;
            @DpadLeft.canceled += instance.OnDpadLeft;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IDpadMoveActions instance)
        {
            @DpadUp.started -= instance.OnDpadUp;
            @DpadUp.performed -= instance.OnDpadUp;
            @DpadUp.canceled -= instance.OnDpadUp;
            @DpadDown.started -= instance.OnDpadDown;
            @DpadDown.performed -= instance.OnDpadDown;
            @DpadDown.canceled -= instance.OnDpadDown;
            @DpadRight.started -= instance.OnDpadRight;
            @DpadRight.performed -= instance.OnDpadRight;
            @DpadRight.canceled -= instance.OnDpadRight;
            @DpadLeft.started -= instance.OnDpadLeft;
            @DpadLeft.performed -= instance.OnDpadLeft;
            @DpadLeft.canceled -= instance.OnDpadLeft;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IDpadMoveActions instance)
        {
            if (m_Wrapper.m_DpadMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDpadMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_DpadMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DpadMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DpadMoveActions @DpadMove => new DpadMoveActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IDpadMoveActions
    {
        void OnDpadUp(InputAction.CallbackContext context);
        void OnDpadDown(InputAction.CallbackContext context);
        void OnDpadRight(InputAction.CallbackContext context);
        void OnDpadLeft(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
